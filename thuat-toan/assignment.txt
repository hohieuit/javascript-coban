## CƠ BẢN
1. Viết hàm tính chu vi hình chữ nhật
2. Viết hàm tính diện tích hình chữ nhật  
3. Viết hàm xuất ra n số lẻ nhỏ nhất 
4. Viết hàm xuất ra n số lẻ gần nhất bắt đầu từ m.
5. Viết hàm kiểm tra một số có phải là số nguyên tố hay không? Biết số nguyên tố là số chia hết cho một và chính nó.
6.  Viết hàm xuất ra n số nguyên tố nhỏ nhất. 
7. Viết hàm trả ra danh sách tất cả số nhỏ hơn n
    - getLessThan(n): number[]
    - Ví dụ getLessThan(3) sẽ trả ra mảng [0,1,2]
8. Viết hàm tìm ra vị trí phần tử đầu tiên nằm trong mảng 
    - find(arr, chuoiCanTim): number
    - Ví dụ find([1,2,3,2,5], 2) sẽ trả ra vi tri 1
9.Viết hàm tìm ra tất cả vị trí phần tử nằm trong mảng
    - filter (arr, chuoiCanTim): number
    - Ví dụ filter([1,2,3,2,5], 2) sẽ trả ra vi tri [1, 3]
10. Định nghĩa một mảng nhân viên gồm 2 thông tin: họ tên, tuổi bao gồm 5 nhân viên
11. Viết hàm sắp xếp tuổi nhân viên giảm dần
    - sortDesc(arr): arr
    - Ví dụ sortDesc([{name: 'hieu', age: 30}, {name:'tuan', age: 40}]) sẽ trả ra kết quả [{name:'tuan', age: 40}, {name: 'hieu', age: 30}]
12. Tìm trong mảng nhân viên có tuổi = x 
    - find(arr, age: number): nhan_vien
    - Ví dụ find([{name: 'hieu', age: 30}, {name:'tuan', age: 40}], 40) => sẽ trả ra kết quả {name:'tuan', age: 40}


## GIẢI THUẬT: ĐỆ QUY, TÌM KIẾM, SẮP XẾP
1. (1 điểm) Viết hàm xuất ra số finbonaci tại vị trí n 
    - finbonaci(n): number
    - Đầu vào là vị trí n
    - Đầu ra là giá trị số finbonaci tại vị trí n
    - Ví dụ: Day finbonaci la: 1 1 2 3 5 8 thì finbonaci(5) = 5

2. (1 điểm) Tính giai thừa của n. Biết rằng n! = 1*2*3*....*n
    - giaiThua(n): number
    
3. (1 điểm) Viết thuật toán sắp xếp bubble sort
    - function bubbleSort(arr: number[]): number[]
    - Đầu vào là một mảng các số
    - Đầu ra là một mảng các số đã được sắp xếp

4. (1 điểm) Cho mang [5,4,2,7,6] sử dụng hàm bubbleSort để sắp xếp lại và trả ra kết quả

5. (1 điểm) Viết thuật toán tìm kiếm tuần tự 
    - function linearSearch(arr, soCanTim): number
    - Đầu vào là một mảng các số & số cần tìm
    - Đầu ra là vị trí số cần tìm

6. (1 điểm) Cho mang [5,4,2,7,6] sử dụng hàm linearSearch để tìm vị trí số 6 trong mảng

7. (2 điểm) Viết thuật toán tìm kiếm nhị phân
    - function binarySearch(arr, soCanTim): number
    - Đầu vào là một mảng các số & số cần tìm
    - Đầu ra là vị trí số cần tìm

8. (1 điểm) Cho mang [5,4,2,7,6] 
    - Sử dụng hàm bubbleSort để sắp xếp lại
    - Sử dụng hàm binarySearch để tìm ra vị trị số 7 trong mảng

9. (1 điểm) Tạo ra mảng từ 1 -> 1048576 tăng dần từ nhỏ tới lớn. 
    - Sử dụng hàm binarySearch để tìm ra vị trị số 1048576 trong mảng, in ra màn hình số lần so sánh của thuật toán
    - 1048576 = 2 ^ 20 => Kiểm tra xem số lần so sánh có phải bằng 20 không?


## CẤU TRÚC DỮ LIỆU
1. Xây dựng cấu trúc dữ liệu danh sách liên kết đôi (double-linked list)
2. Lưu trữ danh sách các số 1,4,7,8 vào danh sách liên kết
3. Viết hàm thêm một phần tử vào đầu danh sách
4. Thêm 9 vào cuối danh sách đã có
5. Viết hàm thêm phần tử vào đầu danh sách 
6. Thêm 5 vào đầu danh sách đã có
7. Viết hàm xóa phần tử ở đầu danh sách & trả ra giá trị bị xóa
8. Xóa phần tử đầu tiên ra khỏi danh sách đã có, và in ra màn hình giá trị của phần tử đó
9. Viết hàm xóa phần tử cuối cùng danh sách & trả ra giá trị bị xóa
10. Xóa phần cuối cùng ra khỏi danh sách đã có, và in ra màn hình giá trị của phần tử đó

11. Xây dựng cấu trúc dữ liẹu queue bằng cấu trúc dữ liệu danh sách liên kết đã xây dựng từ trước
12. Viết hàm thêm phần tử vào queue: function enQueue(value)
13. Thêm các phần 1,3,6,7 vao queue
14. Viết hàm lấy phần tử ra khỏi queue: function deQueue(): value

15. Xây dựng cấu trúc dữ liẹu stack bằng cấu trúc dữ liệu danh sách liên kết đã xây dựng từ trước
16. Viết hàm thêm phần tử vào stack: function push(value)
17. Thêm các phần 1,3,6,7 vao stack
18. Viết hàm lấy phần tử ra khỏi stack: function pop(): value